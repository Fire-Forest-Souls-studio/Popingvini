#include "../../includes/Singletone/language_menu.h"
#include "../../includes/Singletone/person_menu.h"
#include "../../includes/Singletone/names.h"
#include "../../includes/Singletone/loading.h"
#include "../../includes/Singletone/window_and_styles.h"
#include "../../includes/Singletone/works_menu.h"
#include "../../includes/Singletone/test_menu.h"

#include "../../includes/Classes/work.h"
#include "../../includes/Classes/test.h"
#include "../../includes/Classes/question.h"

LanguageMenu* LanguageMenu::class_obj = NULL;

LanguageMenu::LanguageMenu ()
    : L_python ("Python")
{
	L_python.button.setSize (PersonMenu::getButtonSize ());
	L_python.button.setFillColor (Color (
	    PersonMenu::getButtonColor ().r,
	    PersonMenu::getButtonColor ().g,
	    PersonMenu::getButtonColor ().b,
	    0));

	L_python.addWork (Work (
	    L"Начало",
	    L"-> Термины:\nФункция, инициализация, оператор, переменная\n-> Операторы:\n=\n-> Функции:\nprint()",
	    L"? > ⁇",
	    L"\tВсем привет! Я - Попингвини (и моё имя никак не связанно с тем пузатым медведем из советских мультиков) а вы? В общем рад знакомству!\n"
	    L"\tСегодня ты либо пришёл домой и решил: «Почему бы не научиться программировать!?», либо сидишь на уроке, либо что-то другое. Я угадал? Знаю, знаю... Я – гений!\n"
	    L"\n"
	    L"\tНу ладно. Раз ты уже зашёл – начнём! Как бы душно не было (под водой мало форточек), мы начнём с терминов:\n"
	    L"\tПеременная - это поименованная или адресуемая иным способом область  физической или виртуальной памяти, предназначенная для хранения данных (значений)\n"
	    L"\tТо есть, переменная – это что-то, у чего есть имя и значение. Для того чтобы создать переменную её нужно инициализировать:\n"
	    L"\tИнициализация - это шаг, с которого начинается работа с переменными: когда переменной задают её первоначальное значение.\n"
	    L"\tВ питоне чтобы инициализировать переменную нужно написать её имя и в скобочках значение: name(10)\n"
	    L"\n"
	    L"\tТак же можно использовать оператор «=» : name = 10\n"
	    L"\tОператор - это команда, обозначающая определённое математическое или логическое действие, выполняемое с данными (операндами). Является минимальным автономным элементом компьютерной программы.\n"
	    L"\tОператор «=» задаёт переменной новое значение, полностью стирая старое.\n"
	    L"\n"
	    L"\tЧтобы вывести данное значение в консоль, используется функция print(), в которую мы передаём переменную или значение. Например, print(name) выведет 10, print(10) тоже, а print(«name») выведет значение, то есть name.\n"
	    L"\tФункция - это отдельный блок программы, который выполняет конкретное действие. В функцию можно передать значения и она может возвращать значения.\n"
	    L"\n"
	    L"\tНа этом всё! Я пошёл, а вы решайте тест. Всем поки!",
	    Test (
	        {Question (
	             L"Переменная - это поименованная область физической или виртуальной памяти, предназначенная для хранения данных.",
	             {{1, L"Верно"},
	              {0, L"Неверно"}}),
	         Question (
	             L"Инициализация переменной - это процесс, когда переменной задают её окончательное значение.",
	             {{0, L"Верно"},
	              {1, L"Неверно"}}),
	         Question (
	             L"Оператор «=» задаёт переменной новое значение, полностью стирая старое.",
	             {{1, L"Верно"},
	              {0, L"Неверно"}}),
	         Question (
	             L"Функция - это отдельный блок программы, который не может возвращать значения.",
	             {{0, L"Верно"},
	              {1, L"Неверно"}}),
	         Question (
	             L"Чтобы вывести значение переменной в консоль, используется функция print().",
	             {{1, L"Верно"},
	              {0, L"Неверно"}})})));
	L_python.addWork (Work (
	    L"Основные операторы",
	    L"-> Операторы:\n+, -, *, /",
	    L"? > ⁇",
	    L"\tПора пингвинить, так что не будем медлить!!!\n"
	    L"\n"
	    L"\tНа прошлом уроке вы узнали что такое операторы и познакомились с одним из них. Узнаем же и другие:\n"
	    L"\tОператор «+», как бы то не было логично, складывает значения справа и слева (то есть на ввод он получает значения с двух сторон, а на вывод выдаёт их сумму). Например:\n"
	    L"\n"
	    L"\tКод:\n"
	    L"\n"
	    L"\ta = 10 #начало кода\n"
	    L"\tb = 25\n"
	    L"\tc = a + b\n"
	    L"\tprint(a,b,c)\n"
	    L"\tprint(a+b)\n"
	    L"\n"
	    L"\tВывод:\n"
	    L"\n"
	    L"\t10 25 3535\n"
	    L"\n"
	    L"\tКстати, с помощью «#» можно писать комментарии. И ещё кое что новое для вас: если в функцию print() передать несколько значений перечисленных через запятую, то они напечатаются через пробел, а после каждого вызова функции значения печатаются с новой строчки.\n"
	    L"\tОператор «-», «*» и «/» выполняют вычитание, умножение и деление соответственно.",
	    Test (
	        {Question (L"Оператор «+» складывает значения справа и слева.",
	                   {
	                       {1, L"Верно"},
	                       {0, L"Неверно"},
	                   }),
	         Question (L"Функция print() может принимать только одно значение.",
	                   {
	                       {0, L"Верно"},
	                       {1, L"Неверно"},
	                   }),
	         Question (L"Оператор «-» выполняет умножение.",
	                   {
	                       {0, L"Верно"},
	                       {1, L"Неверно"},
	                   }),
	         Question (L"С помощью символа «#» можно писать комментарии в коде.",
	                   {
	                       {1, L"Верно"},
	                       {0, L"Неверно"},
	                   }),
	         Question (L"Оператор «/» выполняет вычитание.",
	                   {
	                       {0, L"Верно"},
	                       {1, L"Неверно"},
	                   }),
	         Question (L"Оператор «*» выполняет деление.",
	                   {
	                       {0, L"Верно"},
	                       {1, L"Неверно"},
	                   }),
	         Question (L"Функция print() печатает значения через запятую на одной строке.",
	                   {
	                       {1, L"Верно"},
	                       {0, L"Неверно"},
	                   }),
	         Question (L"Оператор «+» может складывать только целые числа.",
	                   {
	                       {0, L"Верно"},
	                       {1, L"Неверно"},
	                   }),
	         Question (L"Оператор «/» выполняет деление.",
	                   {
	                       {1, L"Верно"},
	                       {0, L"Неверно"},
	                   }),
	         Question (L"Код начинается с символа «#».",
	                   {
	                       {0, L"Верно"},
	                       {1, L"Неверно"},
	                   })})));
	L_python.addWork (Work (
	    L"Сделаем проще!",
	    L"-> Операторы:\n+=, *=, -=, /=, //, %",
	    L"? > ⁇",
	    L"\tВсем привет! А вы знали, что моего папу зовут Папапопингвини? Так вот... Он очень любит всё сокращать и упрощать. Давайте последуем его примеру?\n"
	    L"\tВ Python есть такие операторы: «+=», «-=», «*=», «/=». Они выполняют действия со значение которое уже записано в переменной, а не выдают новое. Например, a += 10, это то же самое, что и a = a + 10. Аналогично с другими операторами.\n"
	    L"\n"
	    L"\tЧто-то маленький урок получился... Даже тест не дать... Короче вот вам ещё два оператора: «//» находит целую часть от деления, «%» находит остаток от деления. Например, 10/4 = 2.5, 10//4 = 2, 10 % 4 = 2",
	    Test (
	        {Question (L"Папапопингвини любит сокращать и упрощать?",
	                   {
	                       {1, L"Верно"},
	                       {0, L"Неверно"},
	                   }),
	         Question (L"Операторы «+=», «-=», «*=», «/=» выдают новое значение переменной?",
	                   {
	                       {0, L"Верно"},
	                       {1, L"Неверно"},
	                   }),
	         Question (L"Оператор «//» находит целую часть от деления?",
	                   {
	                       {1, L"Верно"},
	                       {0, L"Неверно"},
	                   }),
	         Question (L"10/4 равно 2?",
	                   {
	                       {0, L"Верно"},
	                       {1, L"Неверно"},
	                   }),
	         Question (L"Оператор «%» находит остаток от деления?",
	                   {
	                       {1, L"Верно"},
	                       {0, L"Неверно"},
	                   }),
	         Question (L"Как зовут папу рассказчика?",
	                   {
	                       {1, L"Папапопингвини"},
	                       {0, L"Папа"},
	                       {0, L"Пингвин"},
	                       {0, L"Папа Сокращатель"},
	                   }),
	         Question (L"Что делают операторы «+=», «-=», «*=», «/=»?",
	                   {
	                       {0, L"Выдают новое значение"},
	                       {1, L"Выполняют действия со значением переменной"},
	                       {0, L"Сравнивают значения"},
	                       {0, L"Уменьшают значение переменной"},
	                   }),
	         Question (L"Какой оператор находит целую часть от деления?",
	                   {
	                       {0, L"%"},
	                       {0, L"/"},
	                       {1, L"//"},
	                       {0, L"*"},
	                   }),
	         Question (L"Какое значение дает 10 % 4?",
	                   {
	                       {1, L"2"},
	                       {0, L"0"},
	                       {0, L"0.5"},
	                       {0, L"1"},
	                   }),
	         Question (L"Какое значение дает 10 // 4?",
	                   {
	                       {0, L"2.5"},
	                       {1, L"2"},
	                       {0, L"3"},
	                       {0, L"1"},
	                   })})));
	L_python.addWork (Work (
	    L"Типы данных",
	    L"-> Типы данных:\nfloat, bool, int",
	    L"? > ⁇",
	    L"– Эй, ты!\n"
	    L"– Что я..?\n"
	    L"– Ты... Крутой ты тип!\n"
	    L"\n"
	    L"\tИменно о типах мы и будем сегодня говорить. О типах данных.\n"
	    L"\tТипы данных в программировании — это классификация различных значений, которые могут использоваться в программах. Каждый тип данных определяет, какие операции можно выполнять с данными, как они хранятся в памяти и сколько памяти для этого требуется.\n"
	    L"\tРазберём несколько из них:\n"
	    L"\n"
	    L"\tint – целое число\n"
	    L"\tfloat – число с плавающей точкой (дробное)\n"
	    L"\tbool – содержит значения True или False\n"
	    L"\n"
	    L"\tЧтобы инициализировать переменную какого-либо типа, ей нужно выдать значение этого типа. Например: a = 12.05, значит a – float.",
	    Test (
	        {Question (L"Типы данных в программировании определяют, какие операции можно выполнять с данными.",
	                   {
	                       {1, L"Верно"},
	                       {0, L"Неверно"},
	                   }),
	         Question (L"Тип данных 'int' представляет собой дробное число.",
	                   {
	                       {0, L"Верно"},
	                       {1, L"Неверно"},
	                   }),
	         Question (L"Тип данных 'bool' может содержать значения 'true' или 'false'.",
	                   {
	                       {1, L"Верно"},
	                       {0, L"Неверно"},
	                   }),
	         Question (L"Чтобы инициализировать переменную, ей нужно выдать значение другого типа.",
	                   {
	                       {0, L"Верно"},
	                       {1, L"Неверно"},
	                   }),
	         Question (L"Тип данных 'float' используется для хранения целых чисел.",
	                   {
	                       {0, L"Верно"},
	                       {1, L"Неверно"},
	                   }),
	         Question (L"Тип данных 'float' используется для хранения целых чисел?",
	                   {
	                       {0, L"Верно"},
	                       {1, L"Неверно"},
	                   }),
	         Question (L"Каждый тип данных в программировании определяет, сколько памяти требуется для хранения данных?",
	                   {
	                       {1, L"Верно"},
	                       {0, L"Неверно"},
	                   }),
	         Question (L"Тип данных 'bool' может принимать значения 'true' и 'false'?",
	                   {
	                       {1, L"Верно"},
	                       {0, L"Неверно"},
	                   }),
	         Question (L"Инициализация переменной требует указания значения того же типа данных?",
	                   {
	                       {1, L"Верно"},
	                       {0, L"Неверно"},
	                   }),
	         Question (L"Тип данных 'int' позволяет хранить дробные числа?",
	                   {
	                       {0, L"Верно"},
	                       {1, L"Неверно"},
	                   }),
	         Question (L"Какой тип данных используется для хранения целых чисел?",
	                   {
	                       {0, L"float"},
	                       {2, L"int"},
	                       {0, L"bool"},
	                       {0, L"string"},
	                   }),
	         Question (L"Какой тип данных может содержать значения 'true' или 'false'?",
	                   {
	                       {0, L"int"},
	                       {0, L"float"},
	                       {1, L"bool"},
	                       {0, L"char"},
	                   }),
	         Question (L"Что определяет тип данных в программировании?",
	                   {
	                       {0, L"Как хранятся данные"},
	                       {0, L"Как выполняются операции с данными"},
	                       {0, L"Сколько памяти требуется"},
	                       {1, L"Все вышеперечисленное"},
	                   }),
	         Question (L"Какой тип данных используется для хранения дробных чисел?",
	                   {
	                       {0, L"int"},
	                       {1, L"float"},
	                       {0, L"bool"},
	                       {0, L"string"},
	                   }),
	         Question (L"Что нужно сделать для инициализации переменной?",
	                   {
	                       {0, L"Выдать значение другого типа"},
	                       {1, L"Выдать значение того же типа"},
	                       {0, L"Не нужно ничего делать"},
	                       {0, L"Выдать значение в виде строки"},
	                   })})));
	L_python.addWork (Work (
	    L"Условия",
	    L"-> Операторы:\nif, else, elif, not, ==, >, <, >=, <=",
	    L"? > ⁇",
	    L"\tГоворю в последний раз! Если ты не попингвинишь сегодня, то мы не пойдём за шоколадкой!\n"
	    L"\n"
	    L"\tЭто было условие – тема нашего сегодняшнего урока.\n"
	    L"\tДля условий используется оператор if с таким синтаксисом: «if bool:». То, что будет выполняться при соблюдении условия (bool со значением True) пишется на следующих строках с Tab-ом.\n"
	    L"\n"
	    L"\tTab — это символ табуляции, который вставляется при нажатии на клавишу Tab на клавиатуре.\n"
	    L"\n"
	    L"\tЧтобы получить bool придумали операторы сравнения. Вот некоторые из них и то, когда они возвращают True:\n"
	    L"\t\n"
	    L"\t== – когда значения/переменные равны\n"
	    L"\t!= – когда значения/переменные не равны\n"
	    L"\t> – когда значение/переменная слева больше значения/переменной справа\n"
	    L"\t< – когда значение/переменная слева меньше значения/переменной справа\n"
	    L"\t>= – когда значение/переменная слева больше или равно значению/переменной справа\n"
	    L"\t<= – когда значение/переменная слева меньше или равно значению/переменной справа\n"
	    L"\n"
	    L"\tЕщё существует оператор not. Он возвращает значение противоположное тому, что стоит после него.\n"
	    L" \n"
	    L"\tIf not(ты попингвинишь сегодня):\n"
	    L"\t\tПопингвини расстроится\n"
	    L"\tElif ты сделал дз:\n"
	    L"\t\tТы получишь конфетку\n"
	    L"\tElse:\n"
	    L"\t\tТы будешь наказан\n"
	    L"\n"
	    L"\tНа данном примере вы увидели работу операторов elif и else. Elif работает так же как if, но запускает только если if и elif перед ним были с bool = False. Else работает как  Elif но не требует дополнительных условий.",
	    Test (
	        {Question (L"Оператор if используется для выполнения условий в коде.",
	                   {
	                       {1, L"Верно"},
	                       {0, L"Неверно"},
	                   }),
	         Question (L"Символ табуляции вставляется при нажатии на клавишу Ctrl.",
	                   {
	                       {0, L"Верно"},
	                       {1, L"Неверно"},
	                   }),
	         Question (L"Оператор not возвращает значение, противоположное тому, что стоит после него.",
	                   {
	                       {1, L"Верно"},
	                       {0, L"Неверно"},
	                   }),
	         Question (L"Оператор >= используется для проверки, если значение слева меньше значения справа.",
	                   {
	                       {0, L"Верно"},
	                       {1, L"Неверно"},
	                   }),
	         Question (L"Ключевое слово elif работает так же, как if, но запускается только если if перед ним был с bool = False.",
	                   {
	                       {1, L"Верно"},
	                       {0, L"Неверно"},
	                   }),
	         Question (L"Какой оператор используется для выполнения условий в коде?",
	                   {
	                       {0, L"for"},
	                       {1, L"if"},
	                       {0, L"while"},
	                       {0, L"switch"},
	                   }),
	         Question (L"Что возвращает оператор not?",
	                   {
	                       {0, L"Значение, равное тому, что стоит после него"},
	                       {1, L"Значение, противоположное тому, что стоит после него"},
	                       {0, L"Значение, большее того, что стоит после него"},
	                       {0, L"Значение, меньшее того, что стоит после него"},
	                   }),
	         Question (L"Какой символ вставляется при нажатии на клавишу Ctrl?",
	                   {
	                       {0, L"Пробел"},
	                       {0, L"Табуляция"},
	                       {0, L"Enter"},
	                       {1, L"Никакой"},
	                   }),
	         Question (L"Что делает оператор >=?",
	                   {
	                       {0, L"Проверяет, если значение слева меньше значения справа"},
	                       {0, L"Проверяет, если значение слева больше значения справа"},
	                       {1, L"Проверяет, если значение слева больше или равно значению справа"},
	                       {0, L"Проверяет, если значения равны"},
	                   }),
	         Question (L"Как работает ключевое слово elif?",
	                   {
	                       {0, L"Запускается всегда"},
	                       {1, L"Запускается только если if перед ним был с bool = False"},
	                       {0, L"Запускается независимо от условий"},
	                       {0, L"Не имеет значения"},
	                   }),
	         Question (L"Какой оператор используется для проверки равенства значений?",
	                   {
	                       {1, L"=="},
	                       {0, L"!="},
	                       {0, L"<"},
	                       {0, L">"},
	                   }),
	         Question (L"Что происходит, если условие if истинно?",
	                   {
	                       {1, L"Выполняется код на следующих строках"},
	                       {0, L"Код не выполняется"},
	                       {0, L"Происходит ошибка"},
	                       {0, L"Программа завершает работу"},
	                   }),
	         Question (L"Какой оператор возвращает значение, когда переменные не равны?",
	                   {
	                       {0, L"=="},
	                       {0, L"<"},
	                       {0, L">"},
	                       {1, L"!="},
	                   }),
	         Question (L"Что делает оператор <?",
	                   {
	                       {0, L"Проверяет, если значение слева больше значения справа"},
	                       {1, L"Проверяет, если значение слева меньше значения справа"},
	                       {0, L"Проверяет, если значения равны"},
	                       {0, L"Проверяет, если значение слева больше или равно значению справа"},
	                   }),
	         Question (L"Какой символ используется для табуляции?",
	                   {
	                       {1, L"Tab"},
	                       {0, L"Enter"},
	                       {0, L"Space"},
	                       {0, L"Shift"},
	                   })})));
}

LanguageMenu* LanguageMenu::getClass ()
{
	if (class_obj)
		return class_obj;

	class_obj = new LanguageMenu ();
	return class_obj;
}

void LanguageMenu::main_load ()
{
	LanguageMenu* LM_ = getClass ();

	if (Loading::getLoad ())
	{
		LM_->L_python.button.setTexture ();
	}
}

void LanguageMenu::main_main ()
{
	LanguageMenu* LM_ = getClass ();
	float f = WindowAndStyles::getFactorY ();

	if (names::game_status == GameStatus::language_menu)
	{
		if (PersonMenu::getFrameTransition () > 0.0)
		{
			if (LM_->L_python.button.interect ())
			{
				LM_->L_python.button.setFillColor (Color (255.0, 255.0, 255.0, 255.0 - PersonMenu::getFrameTransition ()));
			}
			else
			{
				LM_->L_python.button.setFillColor (Color (
				    PersonMenu::getButtonColor ().r,
				    PersonMenu::getButtonColor ().g,
				    PersonMenu::getButtonColor ().b,
				    255.0 - PersonMenu::getFrameTransition ()));
			}
		}
		else
		{
			if (LM_->L_python.button.interect ())
			{
				LM_->L_python.button.setFillColor (Color (255.0, 255.0, 255.0, 255.0));
			}
			else
			{
				LM_->L_python.button.setFillColor (Color (
				    PersonMenu::getButtonColor ().r,
				    PersonMenu::getButtonColor ().g,
				    PersonMenu::getButtonColor ().b,
				    255.0));
			}
		}

		LM_->L_python.button.setScale (f);
		LM_->L_python.button.setPosition (
		    WindowAndStyles::getGlobalBounds ().width * 0.5 - PersonMenu::getButtonSize ().x * f * 0.5,
		    WindowAndStyles::getGlobalBounds ().height * 0.5 - PersonMenu::getButtonSize ().y * f * 0.5);

		if (LM_->L_python.button.pressed ())
		{
			WorksMenu::setLanguage (&LM_->L_python);
			TestMenu::setLanguageTexture (LM_->L_python.T_test_background);
			names::game_status = GameStatus::works_menu;
		}
	}
}

void LanguageMenu::main_transitionOf ()
{
	LanguageMenu* LM_ = getClass ();

	if (names::game_status == GameStatus::works_menu)
	{
		if (PersonMenu::getFrameTransition () < 255.0)
		{
			PersonMenu::getFrameTransition () += PersonMenu::getSpeedTransition () * names::microsec * names::f_time;
			LM_->L_python.button.setFillColor (Color (
			    LM_->L_python.button.getRectangleShape ().getFillColor ().r,
			    LM_->L_python.button.getRectangleShape ().getFillColor ().g,
			    LM_->L_python.button.getRectangleShape ().getFillColor ().b,
			    255.0 - PersonMenu::getFrameTransition ()));
		}
		else if (PersonMenu::getFrameTransition () != 255.0)
		{
			PersonMenu::getFrameTransition () = 255.0;
			LM_->L_python.button.setFillColor (Color (
			    LM_->L_python.button.getRectangleShape ().getFillColor ().r,
			    LM_->L_python.button.getRectangleShape ().getFillColor ().g,
			    LM_->L_python.button.getRectangleShape ().getFillColor ().b,
			    255.0 - PersonMenu::getFrameTransition ()));
		}
	}
}

void LanguageMenu::main ()
{
	main_load ();

	main_main ();

	main_transitionOf ();
}

ImageButton& LanguageMenu::getPythonButton ()
{
	return getClass ()->L_python.button;
}

Language& LanguageMenu::getPython ()
{
	return getClass ()->L_python;
}
